//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Data.Common;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Mapping;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.SqlClient;
using System.IO;
using System.Reflection;
using System.Xml;
using System.Xml.Linq;
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

namespace PropertyService.BO
{
    public partial class PropertyEntities : DbContext
    {

        public PropertyEntities()
            : base("name=PropertyEntities")
        {
        }

        public PropertyEntities(string connectionString) : base(connectionString)
        {
        }

        public static PropertyEntities Create(string providerConnectionString)
        {
            var sqlBuilder = new SqlConnectionStringBuilder(providerConnectionString);
            // Set the properties for the data source.  
            sqlBuilder.DataSource = Utility.Server;
            sqlBuilder.InitialCatalog = Utility.Database;
            sqlBuilder.UserID = Utility.Username;
            sqlBuilder.Password = Utility.Password;
            sqlBuilder.IntegratedSecurity = false;
            sqlBuilder.MultipleActiveResultSets = true;
            // Build the SqlConnection connection string.  
            string providerString = Convert.ToString(sqlBuilder);

            var entityBuilder = new EntityConnectionStringBuilder();

            // use your ADO.NET connection string
            entityBuilder.ProviderConnectionString = providerString;

            entityBuilder.Provider = "System.Data.SqlClient";

            // Set the Metadata location.
            entityBuilder.Metadata = @"res://*/BO.Model1.csdl|res://*/BO.Model1.ssdl|res://*/BO.Model1.msl";

            return new PropertyEntities(entityBuilder.ConnectionString);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountChart> AccountChart { get; set; }
        public virtual DbSet<AccountType> AccountType { get; set; }
        public virtual DbSet<Communication> Communication { get; set; }
        public virtual DbSet<Dealer_SalesPartner> Dealer_SalesPartner { get; set; }
        public virtual DbSet<Dealer_SalesPartner_DetailsZipCodeCoverage> Dealer_SalesPartner_DetailsZipCodeCoverage { get; set; }
        public virtual DbSet<FinancialTransaction> FinancialTransaction { get; set; }
        public virtual DbSet<OwnerProfile> OwnerProfile { get; set; }
        public virtual DbSet<PaymentHistory> PaymentHistory { get; set; }
        public virtual DbSet<PaymentInformation> PaymentInformation { get; set; }
        public virtual DbSet<Report> Report { get; set; }
        public virtual DbSet<SystemInformation> SystemInformation { get; set; }
        public virtual DbSet<UserCommission> UserCommission { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserType> UserType { get; set; }
        public virtual DbSet<GlobalID> GlobalID { get; set; }
    
        public virtual int SP_GetID(string objectID, string itemID, Nullable<int> iDForYear, Nullable<int> iDForMonth, Nullable<System.DateTime> iDForDate, ObjectParameter newID)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var iDForYearParameter = iDForYear.HasValue ?
                new ObjectParameter("IDForYear", iDForYear) :
                new ObjectParameter("IDForYear", typeof(int));
    
            var iDForMonthParameter = iDForMonth.HasValue ?
                new ObjectParameter("IDForMonth", iDForMonth) :
                new ObjectParameter("IDForMonth", typeof(int));
    
            var iDForDateParameter = iDForDate.HasValue ?
                new ObjectParameter("IDForDate", iDForDate) :
                new ObjectParameter("IDForDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetID", objectIDParameter, itemIDParameter, iDForYearParameter, iDForMonthParameter, iDForDateParameter, newID);
        }
    }

    
}
